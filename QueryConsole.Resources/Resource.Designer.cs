//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.269
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryConsole.Resources {
    using System;
    
    
    /// <summary>
    /// A strongly-typed resource class, for looking up localized strings, formatting them, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilderEx class via the ResXFileCodeGeneratorEx custom tool.
    // To add or remove a member, edit your .ResX file then rerun the ResXFileCodeGeneratorEx custom tool or rebuild your VS.NET project.
    // Copyright (c) Dmytro Kryvko 2006-2012 (http://dmytro.kryvko.googlepages.com/)
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DMKSoftware.CodeGenerators.Tools.StronglyTypedResourceBuilderEx", "2.7.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
#if !SILVERLIGHT && !PocketPC && !Smartphone && !WindowsCE
    [global::System.Reflection.ObfuscationAttribute(Exclude=true, ApplyToMembers=true)]
#endif
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
    public partial class Resource {
        
        private static global::System.Resources.ResourceManager _resourceManager;
        
        private static object _internalSyncObject;
        
        private static global::System.Globalization.CultureInfo _resourceCulture;
        
        /// <summary>
        /// Initializes a Resource object.
        /// </summary>
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public Resource() {
        }
        
        /// <summary>
        /// Thread safe lock object used by this class.
        /// </summary>
        public static object InternalSyncObject {
            get {
                if (object.ReferenceEquals(_internalSyncObject, null)) {
                    global::System.Threading.Interlocked.CompareExchange(ref _internalSyncObject, new object(), null);
                }
                return _internalSyncObject;
            }
        }
        
        /// <summary>
        /// Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(_resourceManager, null)) {
                    global::System.Threading.Monitor.Enter(InternalSyncObject);
                    try {
                        if (object.ReferenceEquals(_resourceManager, null)) {
                            global::System.Threading.Interlocked.Exchange(ref _resourceManager, new global::System.Resources.ResourceManager("QueryConsole.Resources.Resource", typeof(Resource).Assembly));
                        }
                    }
                    finally {
                        global::System.Threading.Monitor.Exit(InternalSyncObject);
                    }
                }
                return _resourceManager;
            }
        }
        
        /// <summary>
        /// Overrides the current thread's CurrentUICulture property for all
        /// resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return _resourceCulture;
            }
            set {
                _resourceCulture = value;
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Не найден аттрибут {0} в элементе {1}!'.
        /// </summary>
        public static string Conf_AttributeDoesntExist {
            get {
                return ResourceManager.GetString(ResourceNames.Conf_AttributeDoesntExist, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Не найден элемент {0}!'.
        /// </summary>
        public static string Conf_ElementDoesntExist {
            get {
                return ResourceManager.GetString(ResourceNames.Conf_ElementDoesntExist, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Не верно составлен конфигурационный файл!'.
        /// </summary>
        public static string Conf_Error {
            get {
                return ResourceManager.GetString(ResourceNames.Conf_Error, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Указанный провайдер не найден!'.
        /// </summary>
        public static string Data_ProviderNotFound {
            get {
                return ResourceManager.GetString(ResourceNames.Data_ProviderNotFound, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Не найден файл {0}!'.
        /// </summary>
        public static string IO_FileDoesntExist {
            get {
                return ResourceManager.GetString(ResourceNames.IO_FileDoesntExist, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Выберите базу!'.
        /// </summary>
        public static string Q_ConStrSelectionError {
            get {
                return ResourceManager.GetString(ResourceNames.Q_ConStrSelectionError, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Поле запроса пустое!'.
        /// </summary>
        public static string Q_EmptyQueryError {
            get {
                return ResourceManager.GetString(ResourceNames.Q_EmptyQueryError, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Выберите провайдера!'.
        /// </summary>
        public static string Q_ProviderSelectionError {
            get {
                return ResourceManager.GetString(ResourceNames.Q_ProviderSelectionError, _resourceCulture);
            }
        }
        
        /// <summary>
        /// Formats a localized string similar to 'Не найден аттрибут {0} в элементе {1}!'.
        /// </summary>
        /// <param name="arg0">An object (0) to format.</param>
        /// <param name="arg1">An object (1) to format.</param>
        /// <returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
        public static string Conf_AttributeDoesntExistFormat(object arg0, object arg1) {
            return string.Format(_resourceCulture, Conf_AttributeDoesntExist, arg0, arg1);
        }
        
        /// <summary>
        /// Formats a localized string similar to 'Не найден элемент {0}!'.
        /// </summary>
        /// <param name="arg0">An object (0) to format.</param>
        /// <returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
        public static string Conf_ElementDoesntExistFormat(object arg0) {
            return string.Format(_resourceCulture, Conf_ElementDoesntExist, arg0);
        }
        
        /// <summary>
        /// Formats a localized string similar to 'Не найден файл {0}!'.
        /// </summary>
        /// <param name="arg0">An object (0) to format.</param>
        /// <returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
        public static string IO_FileDoesntExistFormat(object arg0) {
            return string.Format(_resourceCulture, IO_FileDoesntExist, arg0);
        }
        
        /// <summary>
        /// Lists all the resource names as constant string fields.
        /// </summary>
        public class ResourceNames {
            
            /// <summary>
            /// Stores the resource name 'Conf_AttributeDoesntExist'.
            /// </summary>
            public const string Conf_AttributeDoesntExist = "Conf_AttributeDoesntExist";
            
            /// <summary>
            /// Stores the resource name 'Conf_ElementDoesntExist'.
            /// </summary>
            public const string Conf_ElementDoesntExist = "Conf_ElementDoesntExist";
            
            /// <summary>
            /// Stores the resource name 'Conf_Error'.
            /// </summary>
            public const string Conf_Error = "Conf_Error";
            
            /// <summary>
            /// Stores the resource name 'Data_ProviderNotFound'.
            /// </summary>
            public const string Data_ProviderNotFound = "Data_ProviderNotFound";
            
            /// <summary>
            /// Stores the resource name 'IO_FileDoesntExist'.
            /// </summary>
            public const string IO_FileDoesntExist = "IO_FileDoesntExist";
            
            /// <summary>
            /// Stores the resource name 'Q_ConStrSelectionError'.
            /// </summary>
            public const string Q_ConStrSelectionError = "Q_ConStrSelectionError";
            
            /// <summary>
            /// Stores the resource name 'Q_EmptyQueryError'.
            /// </summary>
            public const string Q_EmptyQueryError = "Q_EmptyQueryError";
            
            /// <summary>
            /// Stores the resource name 'Q_ProviderSelectionError'.
            /// </summary>
            public const string Q_ProviderSelectionError = "Q_ProviderSelectionError";
        }
    }
}
